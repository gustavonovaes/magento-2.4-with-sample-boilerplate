user nginx;

# you must set worker processes based on your CPU cores, nginx does not benefit from setting more than that
worker_processes auto;

events {
  # determines how much clients will be served per worker
  # max clients = worker_connections * worker_processes
  # max clients is also limited by the number of socket connections available on the system (~64k)
  worker_connections 1024;

  # optimized to serve many clients with each thread, essential for linux -- for testing environment
  use epoll;

  # accept as many connections as possible, may flood worker connections if set too low -- for testing environment
  multi_accept on;
}

pid        /var/run/nginx.pid;

http {
  server_tokens off;
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;
    
  charset UTF-8;
  charset_types text/xml text/plain text/vnd.wap.wml application/x-javascript application/rss+xml text/css application/javascript application/json;


  log_format  main  '$remote_addr - $http_x_real_ip - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

  ## to boost I/O on HDD we can disable access logs
  # access_log /app/var/access.log main;
  access_log off;
  
  # disable not found logs
  log_not_found off;

  # copies data between one FD and other from within the kernel
  # faster than read() + write()
  sendfile on;

  # send headers in one piece, it is better than sending them one by one
  tcp_nopush      on;

  # don't buffer data sent, good for small data bursts in real time
  tcp_nodelay     off;

  gzip on;
  gzip_http_version  1.0;
  gzip_comp_level    5;
  gzip_min_length    256;
  gzip_proxied       any;
  gzip_vary          on;

  gzip_types
    application/atom+xml
    application/javascript
    application/json
    application/rss+xml
    application/vnd.ms-fontobject
    application/x-font-ttf
    application/x-web-app-manifest+json
    application/xhtml+xml
    application/xml
    font/opentype
    image/svg+xml
    image/x-icon
    text/css
    text/plain
    text/x-component;

  # allow the server to close connection on non responding client, this will free up memory
  reset_timedout_connection on;

  # request timed out -- default 60
  client_body_timeout 5s;
  client_header_timeout 5s;

  client_max_body_size 1m;

  # if client stop responding, free up memory -- default 60
  send_timeout 2;

  # server will close connection after this time -- default 75
  keepalive_timeout 30;

  # defines a timeout for reading a response from the FastCGI server.
  fastcgi_read_timeout 10s;

  # config to don't allow the browser to render the page inside an frame or iframe
  # and avoid clickjacking http://en.wikipedia.org/wiki/Clickjacking
  # if you need to allow [i]frames, you can use SAMEORIGIN or even set an uri with ALLOW-FROM uri
  # https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options
  add_header X-Frame-Options SAMEORIGIN;

  # when serving user-supplied content, include a X-Content-Type-Options: nosniff header along with the Content-Type: header,
  # to disable content-type sniffing on some browsers.
  # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
  # currently suppoorted in IE > 8 http://blogs.msdn.com/b/ie/archive/2008/09/02/ie8-security-part-vi-beta-2-update.aspx
  # http://msdn.microsoft.com/en-us/library/ie/gg622941(v=vs.85).aspx
  # 'soon' on Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=471020
  add_header X-Content-Type-Options nosniff;

  # This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
  # It's usually enabled by default anyway, so the role of this header is to re-enable the filter for
  # this particular website if it was disabled by the user.
  # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
  add_header X-XSS-Protection "1; mode=block";

  # with Content Security Policy (CSP) enabled(and a browser that supports it(http://caniuse.com/#feat=contentsecuritypolicy),
  # you can tell the browser that it can only download content from the domains you explicitly allow
  # http://www.html5rocks.com/en/tutorials/security/content-security-policy/
  # https://www.owasp.org/index.php/Content_Security_Policy
  # I need to change our application code so we can increase security by disabling 'unsafe-inline' 'unsafe-eval'
  # directives for css and js(if you have inline css or js, you will need to keep it too).
  # more: http://www.html5rocks.com/en/tutorials/security/content-security-policy/#inline-code-considered-harmful
  add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://ssl.google-analytics.com; img-src 'self' https://ssl.google-analytics.com ; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self'; frame-src 'self'; object-src 'none'";

  upstream fastcgi_backend {
    ## Loading balancing 
    # server 123.123.123.123:9000 max_fails=3 fail_timeout=30;

    # max_conns should be equal to pm.max_children
    server php:9000 max_conns=100;
  }

  # Replace $binary_remote_addr by $http_x_real_ip if using reverse proxy
  # (Reverse proxy should set proxy_set_header X-Real-IP $remote_addr)
  limit_req_zone $binary_remote_addr zone=zone_limit_requests:10m rate=10r/s;
  limit_conn_zone $binary_remote_addr zone=zone_limit_conn_per_ip:10m;

  server {
    listen 80;

    server_name _;

    set $MAGE_ROOT /app;
    set $MAGE_DEBUG_SHOW_ARGS 0;
    set $MAGE_MODE development; 

    include /app/nginx.conf.sample;
  }
}